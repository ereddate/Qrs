import"../chunks/typeCheck.Cq0qUGfz.js";class h{constructor(){this.interceptors={request:[],response:[]},this.mockData=new Map,this.randomGenerators={string:(r=8)=>{const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let t="";for(let s=0;s<r;s++)t+=e.charAt(Math.floor(Math.random()*e.length));return t},number:(r=0,e=100)=>Math.floor(Math.random()*(e-r+1))+r,boolean:()=>Math.random()>=.5,date:(r=new Date(2020,0,1),e=new Date)=>new Date(r.getTime()+Math.random()*(e.getTime()-r.getTime())),array:(r=5,e)=>Array.from({length:r},()=>e()),object:r=>{const e={};for(const t in r)e[t]=this._generateRandomData(r[t]);return e}}}_generateRandomData(r,e=[]){if(Function.is(r))return r();if(Object.is(r)&&!Array.isArray(r)){const t={};for(const s in r){if(e.includes(s)){t[s]=r[s];continue}t[s]=this._generateRandomData(r[s],e)}return t}else if(Array.isArray(r)){const[t,s]=r;if(String.is(t)&&Function.is(s)){const n=s();return Number.is(n)?n:this._generateRandomData(s,e)}return Array.from({length:t},()=>this._generateRandomData(s||"number",e))}else return this.randomGenerators[r]?this.randomGenerators[r]():this.randomGenerators.string()}mock(r,e,t,s,n=[]){Array.isArray(s)?(n=s,s=1):Function.is(t)&&(s=1,n=[]),this.mockData.set(`${e.toUpperCase()} ${r}`,{response:t,count:s,skipFields:n})}addRequestInterceptor(r,e){this.interceptors.request.push({fulfilled:r,rejected:e})}addResponseInterceptor(r,e){this.interceptors.response.push({fulfilled:r,rejected:e})}_runRequestInterceptors(r){return this.interceptors.request.reduce((e,t)=>e.then(t.fulfilled,t.rejected),Promise.resolve(r))}_runResponseInterceptors(r){return this.interceptors.response.reduce((e,t)=>e.then(t.fulfilled,t.rejected),Promise.resolve(r))}request(r){return this._runRequestInterceptors(r).then(e=>{const t=`${e.method.toUpperCase()} ${e.url}`;if(this.mockData.has(t)){const{response:s,count:n,skipFields:a}=this.mockData.get(t),o=Array.from({length:n},()=>this._generateRandomData(s,a));return Promise.resolve({data:n===1?o[0]:o,status:200,statusText:"OK",config:e})}return new Promise((s,n)=>{const a=new XMLHttpRequest;a.open(e.method||"GET",e.url,!0),e.headers&&Object.keys(e.headers).forEach(o=>{a.setRequestHeader(o,e.headers[o])}),a.onload=()=>{const o={data:a.response,status:a.status,statusText:a.statusText,headers:a.getAllResponseHeaders(),config:e,request:a};this._runResponseInterceptors(o).then(s,n)},a.onerror=()=>{n(new Error("Network Error"))},a.send(e.data)})}).catch(e=>Promise.reject(e))}}export{h as F};
