const n={check(r,t){const i=typeof r;return t==="array"?Array.isArray(r):r===null?t==="null":t==="object"&&i==="object"?!Array.isArray(r):t==="date"?r instanceof Date:t==="regexp"?r instanceof RegExp:t==="map"?r instanceof Map:t==="set"?r instanceof Set:t==="promise"?r instanceof Promise:t==="function"?typeof r=="function":i===t},validate(r){return function(t,i,c){const s=c.value;return c.value=function(...u){for(const[o,a]of u.entries()){const f=r.params[o];if(!n.check(a,f))throw new TypeError(`参数 ${o} 应为 ${f} 类型`)}const e=s.apply(this,u);if(r.return&&!n.check(e,r.return))throw new TypeError(`返回值应为 ${r.return} 类型`);return e},c}}};Number.is=function(r){return n.check(r,"number")};String.is=function(r){return n.check(r,"string")};Array.is=function(r){return n.check(r,"array")};Object.is=function(r){return n.check(r,"object")};Date.is=function(r){return n.check(r,"date")};RegExp.is=function(r){return n.check(r,"regexp")};Map.is=function(r){return n.check(r,"map")};Set.is=function(r){return n.check(r,"set")};Promise.is=function(r){return n.check(r,"promise")};Function.is=function(r){return n.check(r,"function")};
